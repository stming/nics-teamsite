SCRITTURA ANT EXTENSIONS PROJECT
================================

This project is intended to unify any custom ant custom tasks needed for
scrittura projects or the Scrittura-Standard application.

PREREQUISITES
=============

This is a self contained project easily imported into Eclipse. See the ECLIPSE-README.txt

You will also need the following jars in your <ANT_HOME>/lib directory

ant-junit.jar
junit 3.8.jar
junitee 3.8.jar
junitee-anttask.jar

If you intend running the ANT build from ECLIPSE you will need to add to <ECLIPSE_ANT_HOME>/lib directory and
configure the ant classpath from the preferences.

BUILDING THE PROJECT
====================

The project is built via ant with properties from the file build.properties.
to build call ant in the project root directory with the 

task											description
----    										-----------
build 											build the project and create the distributable jar file
all												build the project and distributable, compile the junit tests and run them.

When building the project the following properties in build.properites can be used

property										description
--------										-----------
javac.includes									Pattern of source files to include from the build. Defaults to all if not set
javac.excludes									Pattern of source files to exclude from the build. Defaults to none if not set
jar.destfile									Absaloute path and name of jar file to create.


PERFORMING DEV ENVIRONMENT OPERATIONS
=====================================

The project comes with a junit test for each major class component and when enhancing/developing code
this approach of one test per major component should be adhered to. This will make sure that when changing
code nothing is broken.

Create code under the classes/src/java source folder and junit classes under the classes/src/junit folder.
When creating a junit test follow the pattern of junit.<original package of major class under test>.Test<name of major class under test>.
The tests therein should follow the format of test<method name under test without parameter list>.

When compiling/running the junit test classes the following properties in build.properties can be used

property										description
--------										-----------							
junit.compile.includes							Classes to include in compile
junit.compile.excludes							Classes to exclude from the compile
junit.run.showoutput=[yes,no]                	Send any output generated by tests to Ant's logging system as well as to the formatters. By default only the formatters receive the output
junit.run.printsummary=[yes,no,withOutAndErr]	Print one-line statistics for each testcase. Can take the values on, off, and withOutAndErr. withOutAndErr is the same as on but also includes the output of the test as written to System.out and System.err
junit.run.haltonfailure=[true,false]           	Stop the build process if a test fails (errors are considered failures as well)
junit.run.fork=[true,false]                    	Run the tests in a separate VM
junit.run.formatter=[plain,xml,brief]          	Format of the output, brief and plain are flat output, xml lists everything
junit.run.usefile=[true,false]                 	Wether the output of the tests should go to a file
junit.run.log.dir=                           	Directory to create the the tests files
junit.run.includes=                          	Tests and Suites to include in the test run
junit.run.excludes=                          	Tests and Suites to exclude from the test run

ENHANCEMENTS
============